{"ast":null,"code":"import { CHANGE_SEARCH_FIELD, REQUEST_ROBOTS_PENDING, REQUEST_ROBOTS_SUCCESS, REQUEST_ROBOTS_FAILED } from './constant.js';\nexport const setSearchfield = text => ({\n  type: 'CHANGE_SEARCH_FIELD',\n  payload: text\n});\nexport const requestRobots = () => dispatch => {\n  dispatch({\n    type: REQUEST_ROBOTS_PENDING\n  });\n  fetch('https://jasonplaceholder.typicode.com/users').then(response => response.json()).then(data => dispatch({\n    type: REQUEST_ROBOTS_SUCCESS,\n    payload: data\n  })).catch(error => dispatch({\n    type: REQUEST_ROBOTS_FAILED,\n    payload: error\n  }));\n};","map":{"version":3,"sources":["/home/zunayed/git_environment/Robo_friends/src/action.js"],"names":["CHANGE_SEARCH_FIELD","REQUEST_ROBOTS_PENDING","REQUEST_ROBOTS_SUCCESS","REQUEST_ROBOTS_FAILED","setSearchfield","text","type","payload","requestRobots","dispatch","fetch","then","response","json","data","catch","error"],"mappings":"AAAA,SACCA,mBADD,EAECC,sBAFD,EAGCC,sBAHD,EAICC,qBAJD,QAMO,eANP;AASA,OAAO,MAAMC,cAAc,GAAIC,IAAD,KAAS;AAEtCC,EAAAA,IAAI,EAAC,qBAFiC;AAGtCC,EAAAA,OAAO,EAAEF;AAH6B,CAAT,CAAvB;AAOP,OAAO,MAAMG,aAAa,GAAG,MAAOC,QAAD,IAAc;AAChDA,EAAAA,QAAQ,CAAC;AAACH,IAAAA,IAAI,EAAEL;AAAP,GAAD,CAAR;AACAS,EAAAA,KAAK,CAAC,6CAAD,CAAL,CACGC,IADH,CACQC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EADpB,EAEGF,IAFH,CAEQG,IAAI,IAAIL,QAAQ,CAAC;AAACH,IAAAA,IAAI,EAAEJ,sBAAP;AAA+BK,IAAAA,OAAO,EAAEO;AAAxC,GAAD,CAFxB,EAGGC,KAHH,CAGSC,KAAK,IAAIP,QAAQ,CAAC;AAACH,IAAAA,IAAI,EAAEH,qBAAP;AAA8BI,IAAAA,OAAO,EAAES;AAAvC,GAAD,CAH1B;AAIA,CANM","sourcesContent":["import {\n\tCHANGE_SEARCH_FIELD,\n\tREQUEST_ROBOTS_PENDING,\n\tREQUEST_ROBOTS_SUCCESS,\n\tREQUEST_ROBOTS_FAILED \n\n} from './constant.js'\n\n\nexport const setSearchfield = (text)=>({\n\n\ttype:'CHANGE_SEARCH_FIELD',\n\tpayload: text\n\n})\n\nexport const requestRobots = () => (dispatch) => {\n\tdispatch({type: REQUEST_ROBOTS_PENDING})\n\tfetch('https://jasonplaceholder.typicode.com/users')\n\t\t\t.then(response => response.json())\n\t\t\t.then(data => dispatch({type: REQUEST_ROBOTS_SUCCESS, payload: data}))\n\t\t\t.catch(error => dispatch({type: REQUEST_ROBOTS_FAILED, payload: error}))\n}"]},"metadata":{},"sourceType":"module"}